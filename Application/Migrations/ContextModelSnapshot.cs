// <auto-generated />
using System;
using Application;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Application.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Address", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<string>("PostalCode");

                    b.Property<string>("StreetNameAndNumber");

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Domain.Customer", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CustomerNumber");

                    b.Property<string>("Email");

                    b.Property<string>("Password");

                    b.Property<string>("PersonalInformationId");

                    b.HasKey("Id");

                    b.HasIndex("PersonalInformationId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Domain.Insurance.Insurance", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CustomerId");

                    b.Property<DateTime>("DateActive");

                    b.Property<DateTime>("DateOfPurchase");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("InsuranceNumber");

                    b.Property<bool>("IsActive");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Insurances");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Insurance");
                });

            modelBuilder.Entity("Domain.Person", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddressId");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("SocialSecurityNumber");

                    b.Property<string>("TelephoneNumber");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("Domain.Insurance.CarInsurance", b =>
                {
                    b.HasBaseType("Domain.Insurance.Insurance");

                    b.Property<string>("Premium");

                    b.Property<string>("RegistrationNumber");

                    b.HasDiscriminator().HasValue("CarInsurance");
                });

            modelBuilder.Entity("Domain.Customer", b =>
                {
                    b.HasOne("Domain.Person", "PersonalInformation")
                        .WithMany()
                        .HasForeignKey("PersonalInformationId");
                });

            modelBuilder.Entity("Domain.Insurance.Insurance", b =>
                {
                    b.HasOne("Domain.Customer", "Customer")
                        .WithMany("Insurances")
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("Domain.Person", b =>
                {
                    b.HasOne("Domain.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");
                });
#pragma warning restore 612, 618
        }
    }
}
